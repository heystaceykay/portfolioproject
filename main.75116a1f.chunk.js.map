{"version":3,"sources":["components/HeaderComponent.js","components/ChooseComponent.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","watchSelector","series","episode","season","Math","floor","random","console","log","alert","Engage","Button","size","onClick","className","App","classID","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0QAYeA,E,uKARL,OACK,6BACA,iE,GAJMC,a,QCErB,SAASC,IACC,IAAIC,EAAS,iCACTC,EAAU,EACRC,EAASC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAG/C,OAFAC,QAAQC,IAAI,0CAA4CP,EAAS,aAAeE,EAAS,aAAeD,EAAU,KAE1GC,GACH,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACAD,EAAUE,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EAC3CG,MAAM,6DAA+DN,EAAS,aAAeD,EAAU,KACvG,MACL,KAAK,EACAA,EAAUE,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EAC3CG,MAAM,6DAA+DN,EAAS,aAAeD,EAAU,KACvG,MACL,QACKA,EAAUE,KAAKC,MAAoB,IAAdD,KAAKE,QAAgB,EAC1CG,MAAM,6DAA+DN,EAAS,aAAeD,EAAU,KAIjHK,QAAQC,IAAI,mCAAqCP,EAAS,+BAAiCE,EAAS,aAAeD,EAAU,K,IAgBxHQ,E,uKAXL,OACK,6BACA,gEACA,kBAACC,EAAA,EAAD,CAAQC,KAAK,KAAKC,QAASb,GAA3B,UACA,yBAAKc,UAAU,OAAf,4C,GANMf,aCjBNgB,MAXf,WACE,OACE,yBAAKD,UAAU,kBACb,kBAAC,EAAD,MACE,kBAAC,EAAD,MACA,yBAAKE,QAAQ,cCEDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.75116a1f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n     render() {\n          return (\n               <div>\n               <h1>Space, the final frontier...</h1>\n               </div>\n          );\n     }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { Button } from 'reactstrap';\n\n\nfunction watchSelector() {\n          let series = 'Star Trek: The Next Generation';\n          let episode = 0;\n          const season = Math.floor(Math.random() * 7) + 1;\n          console.log('PRE-SWITCH STATEMENT: You should watch ' + series + '.\\nseason ' + season + ', episode ' + episode + '.');\n          \n          switch (season) {\n               case 1:\n               case 3:\n               case 4:\n               case 5:\n               case 6:\n               case 7:\n                    episode = Math.floor(Math.random() * 26) + 1;\n                    alert('You should watch Star Trek: The Next Generation:\\n season ' + season + ', episode ' + episode + '.');\n                    break;\n               case 2: \n                    episode = Math.floor(Math.random() * 22) + 1; \n                    alert('You should watch Star Trek: The Next Generation:\\n season ' + season + ', episode ' + episode + '.');\n                    break;\n               default: \n                    episode = Math.floor(Math.random * 178) + 1;\n                    alert('You should watch Star Trek: The Next Generation:\\n season ' + season + ', episode ' + episode + '.');\n                    break;\n          };\n\n          console.log('AFTER SWITCH STATEMENT: SERIES: ' + series + '.\\nYou have selected season ' + season + ', episode ' + episode + '.');\n     };\n     \nclass Engage extends Component {\n     render() {\n          return (\n               <div>\n               <div>Which episode should you watch?</div>\n               <Button size=\"lg\" onClick={watchSelector}>Engage</Button>\n               <div className=\"box\">Other Star Trek series coming soon!</div>\n               </div>\n               \n          );\n     }\n}\n\nexport default Engage;","import React from 'react';\nimport './App.css';\nimport Header from '/Users/heystaceykay/Desktop/NucampFolder/Portfolio-Project/TrekPick/react-trek/trekwatch/src/components/HeaderComponent.js';\nimport Engage from '/Users/heystaceykay/Desktop/NucampFolder/Portfolio-Project/TrekPick/react-trek/trekwatch/src/components/ChooseComponent.js';\n\nfunction App() {\n  return (\n    <div className=\"App App-header\">\n      <Header />\n        <Engage />\n        <div classID=\"Message\"></div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}